{"name":"Ty xmppdemo","tagline":"xmppdemo实现加添好友,发送文字,语音,图片,消息记录.","body":"此次 这版 XMPPDemo 从7.17至7.24 日 完成.\r\n功能实现:\r\n\r\n1.\t登陆\r\n2.\t注册\r\n3.\t收发文本消息\r\n4.\t收发图片消息\r\n5.\t收发语音消息\r\n6.\t添加好友\r\n7.\t拒绝添加好友\r\n8.\t消息记录\r\n9.\t好友列表获取\r\n\r\n\r\n1.\t登陆详情:\r\n登陆前,首先要配置服务器,和连接服务器的相关参数,例如:\r\n\t服务器ip地址\r\n\t域名\r\n\t开启服务器服务\r\n确认XMPPStream 配置 正确,各项协议回调 已激活\r\n初始化时 需要配置的类,否则服务无法检测\r\n    self.xmppStream = [[XMPPStream alloc] init];\r\n#if !TARGET_IPHONE_SIMULATOR\r\n    // 设置此行为YES,表示允许socket在后台运行\r\n    // 在模拟器上是不支持在后台运行的\r\n    self.xmppStream.enableBackgroundingOnSocket = YES;\r\n#endif\r\n\r\n    // 设置自动断线重连 模块会监控意外断开连接并自动重连\r\n    self.xmppReconnect = [[XMPPReconnect alloc] init];\r\n    [self.xmppReconnect activate:self.xmppStream];\r\n\r\n    //好友相关\r\n    // 配置花名册并配置本地花名册储存\r\n    self.xmppRosterStorage = [[XMPPRosterCoreDataStorage alloc] init];\r\n    self.xmppRoster =\r\n        [[XMPPRoster alloc] initWithRosterStorage:self.xmppRosterStorage];\r\n    self.xmppRoster.autoFetchRoster = YES; //是否自动获取花名册\r\n    // 是否自动同意添加好友\r\n    self.xmppRoster.autoAcceptKnownPresenceSubscriptionRequests = YES;\r\n\r\n    // 配置vCard存储支持，vCard模块结合vCardTempModule可下载用户Avatar\r\n    self.xmppvCardStorage = [[XMPPvCardCoreDataStorage alloc] init];\r\n    self.xmppvCardTempModule =\r\n        [[XMPPvCardTempModule alloc] initWithvCardStorage:self.xmppvCardStorage];\r\n    self.xmppvCardAvatarModule = [[XMPPvCardAvatarModule alloc]\r\n        initWithvCardTempModule:self.xmppvCardTempModule];\r\n\r\n    // XMPP特性模块配置，用于处理复杂的哈希协议等\r\n    self.xmppCapailitiesStorage = [[XMPPCapabilitiesCoreDataStorage alloc] init];\r\n    self.xmppCapabilities = [[XMPPCapabilities alloc]\r\n        initWithCapabilitiesStorage:_xmppCapailitiesStorage];\r\n    self.xmppCapabilities.autoFetchHashedCapabilities = YES;\r\n    self.xmppCapabilities.autoFetchNonHashedCapabilities = NO;\r\n\r\n    // 激活XMPP stream\r\n    [self.xmppReconnect activate:self.xmppStream];\r\n    [self.xmppRoster activate:self.xmppStream];\r\n    [self.xmppvCardTempModule activate:self.xmppStream];\r\n    [self.xmppvCardAvatarModule activate:self.xmppStream];\r\n    [self.xmppCapabilities activate:self.xmppStream];\r\n\r\n    // 消息相关\r\n    self.xmppMessageStorage = [[XMPPMessageArchivingCoreDataStorage alloc] init];\r\n    self.xmppMessageArchiving = [[XMPPMessageArchiving alloc]\r\n        initWithMessageArchivingStorage:self.xmppMessageStorage];\r\n    [self.xmppMessageArchiving setClientSideMessageArchivingOnly:YES];\r\n    [self.xmppMessageArchiving activate:self.xmppStream];\r\n\r\n    // 添加代理\r\n    [self.xmppStream addDelegate:self delegateQueue:dispatch_get_main_queue()];\r\n    [self.xmppRoster addDelegate:self delegateQueue:dispatch_get_main_queue()];\r\n    [self.xmppMessageArchiving addDelegate:self\r\n                             delegateQueue:dispatch_get_main_queue()];\r\n\r\n登陆时需要 验证密码\r\n登陆时验证密码流程 : 首先连接到服务器  -> 将用户名拼接发送到服务器 -> 将密码发送给服务器等待验证\r\n⇒\t返回验证结果(正确或失败)\r\nXMPP登陆 所用的方法 \r\n{\r\n// 连接服务器,调用此方法时,参数必须已设定 myJid .\r\n-\t(BOOL)connectWithTimeout:(NSTimeInterval)timeout error:(NSError **)errPtr\r\n\r\n//登陆成功回调\r\n-\t(void)xmppStreamDidAuthenticate:(XMPPStream*)sender\r\n\r\n// 验证密码 XMPPStream 对象调用\r\nauthenticateWithPassword \r\n// 登陆失败回调\r\n- (void)xmppStream:(XMPPStream*)sender didNotAuthenticate:(NSXMLElement*)error\r\n\r\n} \r\n\r\n2.\t注册与登陆 流程相同 这里只将 涉及到得 方法 列出\r\n{\r\n#pragma mark-----服务器连接 回调\r\n- (void)xmppStreamDidConnect:(XMPPStream*)sender\r\n{\r\n    DLog(@\"xmppStreamDidConnect 服务器 已连接 JID = %@\", sender.myJID);\r\n    if (callblockConnect) {\r\n        callblockConnect(YES);\r\n    }\r\n    switch (self.connectToServerPurpose) {\r\n    case ConnectToServerPurposeLogin: //登陆\r\n        [sender authenticateWithPassword:_userPS error:NULL];\r\n        break;\r\n    case ConnectToServerPurposeRegister: //注册\r\n        [sender registerWithPassword:_userPS error:NULL];\r\n        break;\r\n    default:\r\n        break;\r\n    }\r\n}\r\n#pragma mark-----注册成功\r\n-\t(void)xmppStreamDidRegister:(XMPPStream*)sender\r\n\r\n#pragma mark-----注册失败\r\n- (void)xmppStream:(XMPPStream*)sender didNotRegister:(NSXMLElement*)error)sender\r\n}\r\n\t这里选着在 连接服务器成功回调里添加 注册密码发送.\r\n\r\n3.\t由于文本,图片,语音收发的实现原理基本一致.所以在这里将文本,图片,语音统一进行归纳,和方法整理\r\nXMPP  即时通讯 是通过xml 流 传输. 下面是一段 基础文本 消息的 xml .\r\n<message type=\"chat\" to=\"97@zxcvbnm/8.100000\"><body>2</body></message>\r\ntype = “chat” 是消息类型,此次xmpp 实现收发消息 都是通过这种类型 \r\nto = 91@zxcvnm/8.10000 为消息接受者\r\nbody 作为消息载体,例子 xml 中 body 2 为消息内容\r\n\r\nXMPPStream sendElement:\r\nXmppstream 调用sendElement 方法将 消息发送给服务器,再有服务器转发给消息接受者\r\n\r\n图片: 将想要发送的图片压缩(为了节省流量,压缩后每张图片大约为 10k,压缩到最低)转整 NSData\r\n然后通过base64 转换成 字符串 拼接到 body 中进行发送.(发送前将body前插入图片消息的标示)\r\n.\r\n语音:将录制好的NSData 语音数组,通过base64 转换成字符串.以下处理与图片消息一致,不在复述. \r\n\r\n同时 XMPP 提供了 2个消息 发送后的回调方法,分别是:\r\n1.发送成功\r\n- (void)xmppStream:(XMPPStream*)sender didSendMessage:(XMPPMessage*)message\r\n2.发送失败\r\n- (void)xmppStream:(XMPPStream*)sender\r\n    didFailToSendMessage:(XMPPMessage*)message\r\n                   error:(NSError*)error\r\n\r\n由于时间较紧此次Demo并没有将消息发送成功和发送失败,以及消失超时进行处理.\r\n\r\n\r\n6.添加好友\r\n\t添加好友需要用到的两个类分别是:\r\nXMPPRoster\t//这个类是管理好友,正删改查\r\nXMPPRosterCoreDataStorage //提供用来管理Coredata进行好友存储的类\r\n好友添加流程:\r\n\t首先检索输入的联系人是否是好友,如果不是 -> 发送添加好友请求(XMPPRoster调用 subscribePresenceToUser:Jid 此方法只是发送好友请求,不做其他任何操作) -> 等待被添加用户进行确认(xmpp可以设置默认同意) ->\r\n根据被添加用户的操作状态回调,进行(添加好友,和删除好友,如果对方同意那么将用户添加到自己的好友列表当中,如果不同意那么将用户从自己的好友列表当中删除,这里需要解释一下为什么删除,为什么coredata存储好友信息,它使无论对方是否同意关注你,都会讲你发送过请求的用户信息添加到数据库当中当然服务器数据库也是这样的,所以对方拒绝添加的时候我选着了从好友列表当中删除) -> 当双方成为好友时更新好友列表(- (void)xmppRoster:(XMPPRoster*)sender\r\ndidReceiveRosterItem:(NSXMLElement*)item 回调方法)\r\n\r\n8.消息列表\r\n\tXMPP自带消息存储(CoreData)所以此Demo并没有再通过数据库将消息做持久化的必要.一下只列出 过滤 所需要德联系人得消息记录,\r\n通过谓词检索过滤出 当前回话联系人得消息记录\r\n\"streamBareJidStr == %@ AND bareJidStr == %@”\r\n第一个为myJid,第二个为联系人Jid.\r\n返回消息载体为XMPPMessageArchiving_Message_CoreDataObject 对象\r\n这里有必要 介绍 该对象 的isOutgoing 属性,此属性是标示 消息来源,也就是说 代表是别人发给你的,还是你发给别人得 (YES 是你自己发的,NO…)\r\n\r\n9.好友列表获取\r\n好友列表可以通过两种方式得到\r\n1.\t通过 检索 本地数据库 获得好友列表 (此Demo采用了本方法).\r\n2.\t通过 向服务器发送请求 (此Demo讲此段代码注掉了,然而我发送的请求服务器并没有回答我,所以将此方法废弃).\r\n下面是2中方式的代码 实现\r\n 实体名 @” XMPPUserCoreDataStorageObject”\r\n当然CoreData是支持排序的.我选着按 用户的Jid 进行了升序排序\r\n@”jidStr”\r\n返回的对象XMPPUserCoreDataStorageObject.\r\n\r\n\r\n\t由于本人技术和时间等因素,并未能将所有功能一一实现.\r\n聊天室 和 用户 vCard 信息. Xmpp提供了实现方法.\r\n\t本人调研了 文件传输,语音通话,视频通话,所用到的 XEP 167,180, 176.协议,在网上的 所有xmppframework 当中 并没有找到.只是对相关实现原理进行了简单了解.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}